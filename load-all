(* emacs: -*-SML-*- *)

local
    structure Fs = OS.FileSys
    structure P = OS.Process
    structure T = TextIO

    (* order is important - dependencies *)
    val dirs =
        [ "src"
        , "Util"
        ]

    val modules =
        [ "GlobalCombinators.sml"
        ]

    fun build_dir d =
        let val cwd = Fs.getDir ()
            fun print s = T.output (T.stdOut, s)
        in
            Fs.chDir d
          ; map print ["\n", "Entering directory `", cwd, "/", d, "'\n"]
          ; use "load-all" handle _ => P.exit P.failure
          ; map print ["\n", "Leaving directory `", cwd, "/", d, "'\n"]
          ; Fs.chDir cwd
        end

    fun have_sig s =
        let fun is_this_sig s' = (s = s')
        in List.exists is_this_sig (PolyML.Compiler.signatureNames ()) end
in
    val _ = ( app use modules ; app build_dir dirs )
end
